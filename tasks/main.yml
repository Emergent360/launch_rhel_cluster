---
# tasks file for launch_rhel_ami
- name: Get the VPC info for {{ ec2_name_prefix }}-vpc
  ec2_vpc_net_info:
    filters:
      "tag:Name": "{{ ec2_name_prefix }}-vpc"
    region: "{{ ec2_region }}"
  register: vpc_net_facts

- name: Set the VPC ID
  set_fact:
    vpc_id: "{{ vpc_net_facts.vpcs[0].id }}"

- name: Get the SG info for {{ ec2_name_prefix }}-vpc
  ec2_group_info:
    filters:
      vpc-id: "{{ vpc_id }}"
#      group-name: "{{ ec2_name_prefix }}-sg"
    region: "{{ ec2_region }}"
  register: sg_net_facts

- name: Set the SG names and ids
  set_fact:
    sg_list: "{{ sg_net_facts | json_query(sg_query) }}"
  vars:
    sg_query: "security_groups[*].{group_id: group_id, name: group_name}"

- name: Get the subnet IDs for {{ ec2_name_prefix }}-vpc
  ec2_vpc_subnet_info:
    region: "{{ ec2_region }}"
    filters:
      vpc-id: "{{ vpc_net_facts.vpcs[0].id }}"
  register: subnet_info

- name: Select Public subnets
  debug:
    msg: "{{ subnet_info.subnets }}"

- name: Set subnet name and ids
  set_fact:
    subnet_list: "{{ subnet_info | json_query(subnet_query) }}"
  vars:
    subnet_query: "subnets[*].{subnet_id: subnet_id, name: tags.Name}"

- name: "Find current, region-specific AMI."
  ec2_ami_info:
    region: "{{ ec2_region }}"
    filters:
      name: "{{ ami_name }}"
  register: found_amis

- name: "Set AMI value"
  set_fact:
    rhel_ami: "{{ found_amis.images | selectattr('name', 'defined') | sort(attribute='creation_date') | last }}"
  when: found_amis.images is defined

#- name: "Start RHEL instances."
#  ec2:
#    key_name: "{{ ec2_name_prefix }}-key"
#    region: "{{ ec2_region }}"
#    image: "{{ rhel_ami.image_id }}"
#    instance_type: "{{ instance_type }}"
    #group_id: "{{ sg_net_facts.security_groups[0].group_id }}"
#    vpc_subnet_id: "{{ item.subnet_id }}"
#    wait: yes
#    wait_timeout: 500
#    exact_count: "{{ instance_count }}"
#    count_tag:
      #Name: "{{ ec2_name_prefix }} RHEL server {{ item.tags.Alias | regex_replace('^.*_(.*)$', '\\1') }}"
#    instance_tags:
#      Role: service_cluster
#      Cluster: "{{ cluster_id }}"
      #Name: "{{ ec2_name_prefix }} RHEL server {{ item.tags.Alias | regex_replace('^.*_(.*)$', '\\1') }}"
#      Inventory: "{{ ec2_name_prefix }}"
#      Stage: "instantiated"
#      Platform: RHEL
#  loop: "{{ subnet_info.subnets }}"
#  register: ec2
#
#- name: "Wait for connection on all hosts."
#  wait_for:
#    host: "{{ item.tagged_instances[0].public_ip }}"
#    port: 22
#    timeout: 300
#  loop: "{{ ec2.results }}"

